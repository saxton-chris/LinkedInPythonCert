# This is an optimized version of the same function using ChatGPT to optimize.
# There was an almost 25% performance increase using this new version

from typing import Any, List

def index_all(input_list: List[Any], target: Any) -> List[List[int]]:
    """
    Finds all indices of a target element in a nested list.

    Args:
        input_list (List[Any]): The list to search through, which may contain nested lists.
        target (Any): The target element to search for.

    Returns:
        List[List[int]]: A list of index paths where the target element is found.
                         Each path is represented as a list of indices.

    Example:
        >>> index_all([[[1, 2, 3], 2, [1, 3]], [1, 2, 3]], 2)
        [[0, 0, 1], [0, 1], [1, 1]]
    """
    results = []  # Stores the paths (indices) of the target element.

    def find_indices(sublist: List[Any], path: List[int]):
        """
        Recursively searches for the target in a (possibly nested) sublist.

        Args:
            sublist (List[Any]): The current list (or sublist) being searched.
            path (List[int]): The path of indices leading to the current sublist.
        """
        for i, element in enumerate(sublist):
            path.append(i)  # Add the current index to the path.
            if element == target:
                results.append(path.copy())  # Store a copy of the path if target matches.
            elif isinstance(element, list):
                find_indices(element, path)  # Recurse if element is a list.
            path.pop()  # Remove the current index before backtracking.

    # Start the recursive search with the initial list and an empty path.
    find_indices(input_list, [])

    return results

# Example usage
print(index_all([[[1, 2, 3], 2, [1, 3]], [1, 2, 3]], 2))

# A more complex example
complex_list = [
    [1, 2, [3, 4, [5, 2], 6], 2],
    [2, [3, [2, [1, 2]]], [4, 2]],
    [[[[2]]], 7],
    [8, 9, [10, [11, 2]]]
]
print(index_all(complex_list, 2))
print(index_all(complex_list, 3))
